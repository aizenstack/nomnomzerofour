
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.News_postScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  image_url: 'image_url',
  slug: 'slug',
  authorId: 'authorId',
  is_publish: 'is_publish',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.Jadwal_jimpitScalarFieldEnum = {
  id: 'id',
  members: 'members',
  dayId: 'dayId',
  createdAt: 'createdAt'
};

exports.Prisma.DaysScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.RessonScalarFieldEnum = {
  id: 'id',
  reassonId: 'reassonId',
  content: 'content',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.NotedScalarFieldEnum = {
  id: 'id',
  content: 'content',
  is_active: 'is_active',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.roleUser = exports.$Enums.roleUser = {
  own: 'own',
  admin: 'admin',
  external_user: 'external_user'
};

exports.onPublish = exports.$Enums.onPublish = {
  publish: 'publish',
  unpublish: 'unpublish'
};

exports.an_active = exports.$Enums.an_active = {
  active: 'active',
  nonactive: 'nonactive'
};

exports.Prisma.ModelName = {
  user: 'user',
  categories: 'categories',
  news_post: 'news_post',
  jadwal_jimpit: 'jadwal_jimpit',
  days: 'days',
  resson: 'resson',
  feedback: 'feedback',
  noted: 'noted'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\laragon\\www\\Project-FreeLance\\web-nomfour\\new-be\\prisma\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\laragon\\www\\Project-FreeLance\\web-nomfour\\new-be\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel user {\n  id        Int         @id @default(autoincrement())\n  username  String      @unique\n  password  String\n  ressons   resson[]\n  post      news_post[]\n  role      roleUser    @default(external_user)\n  createdAt DateTime    @default(now())\n}\n\nenum roleUser {\n  own\n  admin\n  external_user\n}\n\nmodel categories {\n  id        Int         @id @default(autoincrement())\n  name      String      @unique\n  posts     news_post[]\n  createdAt DateTime    @default(now())\n}\n\nmodel news_post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  content    String\n  image_url  String\n  slug       String     @unique\n  author     user       @relation(fields: [authorId], references: [id])\n  authorId   Int\n  is_publish onPublish  @default(unpublish)\n  categoryId Int\n  category   categories @relation(fields: [categoryId], references: [id])\n  createdAt  DateTime   @default(now())\n  updateAt   DateTime   @default(now())\n}\n\nenum onPublish {\n  publish\n  unpublish\n}\n\nmodel jadwal_jimpit {\n  id        Int      @id @default(autoincrement())\n  members   String\n  dayId     Int\n  day       days     @relation(fields: [dayId], references: [id])\n  createdAt DateTime @default(now())\n}\n\nmodel days {\n  id        Int             @id @default(autoincrement())\n  name      String\n  jadwals   jadwal_jimpit[]\n  createdAt DateTime        @default(now())\n}\n\nmodel resson {\n  id        Int      @id @default(autoincrement())\n  reassonId Int\n  resson    user     @relation(fields: [reassonId], references: [id])\n  content   String\n  createdAt DateTime @default(now())\n  updateAt  DateTime @default(now())\n}\n\nmodel feedback {\n  id        Int      @id @default(autoincrement())\n  title     String\n  content   String\n  CreatedAt DateTime @default(now())\n}\n\nenum an_active {\n  active\n  nonactive\n}\n\nmodel noted {\n  id        Int       @id @default(autoincrement())\n  content   String\n  is_active an_active @default(nonactive)\n  createdAt DateTime  @default(now())\n  updateAt  DateTime  @updatedAt\n}\n",
  "inlineSchemaHash": "8ca8734595520900e5b3b52edccbe074d50bc94967efa6119d722b994e2fad96",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"user\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ressons\",\"kind\":\"object\",\"type\":\"resson\",\"relationName\":\"ressonTouser\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"news_post\",\"relationName\":\"news_postTouser\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"roleUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"categories\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"news_post\",\"relationName\":\"categoriesTonews_post\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"news_post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image_url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"news_postTouser\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"is_publish\",\"kind\":\"enum\",\"type\":\"onPublish\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"categories\",\"relationName\":\"categoriesTonews_post\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updateAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"jadwal_jimpit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"members\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dayId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"day\",\"kind\":\"object\",\"type\":\"days\",\"relationName\":\"daysTojadwal_jimpit\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"days\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jadwals\",\"kind\":\"object\",\"type\":\"jadwal_jimpit\",\"relationName\":\"daysTojadwal_jimpit\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"resson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reassonId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"resson\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"ressonTouser\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updateAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"feedback\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"CreatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"noted\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"is_active\",\"kind\":\"enum\",\"type\":\"an_active\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updateAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

